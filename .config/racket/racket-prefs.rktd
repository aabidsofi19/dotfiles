(
 (|plt:DrRacket 8.8-splash-max-width| 1018)
 (plt:framework-pref:drracket:recent-language-names (("Determine language from source" #6(#t print mixed-fraction-e #f #t debug) (default) #0() #f #t #t ((test) (main)) #t)))
 (plt:framework-pref:drracket:language-settings ((-32768) (#6(#t print mixed-fraction-e #f #t debug) (default) #0() #f #t #t ((test) (main)) #t)))
 (readline-input-history
  (
   #"(cddddr ( cdr (list 1 2 3 4 5 6 7)))"
   #"(cddddr ( cdr (list 1 2 3 4 5)))"
   #"(cdddddr (list 1 2 3 4 5))"
   #"(cddddr (list 1 2 3 4 5))"
   #"(cdddr (list 1 2 3 4 5))"
   #"(cddr (list 1 2 3 4 5))"
   #"?"
   #"--help"
   #"ls"
   #":l"
  ))
 (|plt:DrRacket 8.9-splash-max-width| 1019)
 (plt:framework-pref:framework:exit-when-no-frames #t)
 (plt:framework-pref:framework:standard-style-list:font-size #2(#hash((((1920 1080) (1600 900)) . 14) (((1920 1080)) . 12)) 14))
 (plt:framework-pref:framework:color-scheme white-on-black)
 (plt:framework-pref:plt:debug-tool:stack/variable-area 9/10)
 (plt:framework-pref:drracket:unit-window-size-percentage 43/58)
 (plt:framework-pref:drracket:window-size #hash((#f . (#t 600 650)) (((0 0 1920 1080)) . (#t 600 650)) (((-1600 0 1920 1080) (0 0 1600 900)) . (#t 600 650))))
 (plt:framework-pref:drracket:window-position #hash((#f . (1 0 0)) (((0 0 1920 1080)) . (0 0 0)) (((-1600 0 1920 1080) (0 0 1600 900)) . (1 0 0))))
 (plt:framework-pref:framework:recently-opened-files/pos ((#"/home/aabid/workspace/sicp/monte-carlo.rkt" 0 0) (#"/home/aabid/workspace/sicp/3.1.rk" 0 0)))
 (plt:framework-pref:drracket:most-recent-lang-line "#lang racket\n")
 (plt:framework-pref:framework:verify-exit #t)
 (plt:framework-pref:drracket:recently-closed-tabs ((#"/home/aabid/workspace/sicp/monte-carlo.rkt" 829 829) (#"/home/aabid/workspace/sicp/3.1.rk" 715 715)))
 (plt:framework-pref:drracket:console-previous-exprs
  (
   ("(withdraw 20)")
   ("(withdraw 30)")
   ("(withdraw 300)")
   ("(define withdraw (make-withdraw 200))")
   ("withdraw")
   ("\n(withdraw 200)")
   ("(withdraw 20)")
   ("(define x (make-withdraw 100))")
   ("(x 10)")
   ("(define acc1 (make-account 1000))")
   ("(acc1 'withdraw)")
   ("((acc1 'withdraw) 100)")
   ("(define acc (make-account 1000))")
   ("(acc 'balance)")
   ("(define A (make-accumlator 0))")
   ("(A 10)")
   ("(A 20)")
   ("(A -10)")
   ("(define (add-1 x) (+ x 1)) ")
   ("(define mf (make-monitored add-1))")
   ("(mf 2)")
   ("(mf 3)")
   ("(mf -2)")
   ("(mf 'calls)")
   ("(mf 'reset-calls)")
   ("(mf 'calls)")
   ("(define acc (make-account 100 'secret))")
   ("(acc 'secret 'balance)")
   ("(acc 'a 'balance)")
   ("(/ 4 3)")
   ("(/ 4.0 3)")
   ("(% 2 3)")
   ("(remainder)")
   ("rand-update")
   ("random")
   ("(random)")
   ("(rand-update 10)")
   ("(rand-update 4)")
   ("(define gen (rand 120))")
   ("(gen)")
   ("(** 2 1)")
   ("(** (base exp)\n      (if (= exp 0)\n          1\n          (* base (** base (- exp 1)))))")
   ("(** 2 2)")
   ("(** 2 31)")
   ("(rand)")
   ("((rand))")
   ("(define rand (rand))")
   ("(define r (rand))")
   ("(r)")
   ("(** (4 (/ 1 2)))")
   ("(** 4 (/ 1 2))")
   ("sqrt")
   ("(cesaro-test)")
   ("(gcd 44 22)")
   ("(gcd 22 4)")
   ("(estimate-pi)")
   ("(estimate-pi 1000)")
   ("(cesaro-test)")
   ("(estimate-pi 1000)")
   ("(estimate-pi 10)")
   ("(estimate-pi 1)")
   ("(estimate-pi 2)")
   ("(monte-carlo 2 (lambda () #t))")
   ("(estimate-pi)")
   ("(estimate-pi 1000)")
   ("(estimate-pi 50000)")
  ))
)
